# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Post {
  id: ID!
  title: String
  rating: Int
  pair: String
  pairNested: PairNestedOutput
  pairJson: PairJsonOutput
  content: Post_content_Document
}

type PairNestedOutput {
  left: String
  right: String
}

type PairJsonOutput {
  left: String
  right: String
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  pair: PairFilter
  pairNested: PairNestedFilter
  pairJson: PairJsonFilter
}

input PairFilter {
  equals: String
}

input PairNestedFilter {
  equals: PairNestedInput
}

input PairNestedInput {
  left: String
  right: String
}

input PairJsonFilter {
  equals: PairJsonInput
}

input PairJsonInput {
  left: String
  right: String
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  rating: OrderDirection
}

input PostUpdateInput {
  title: String
  rating: Int
  pair: String
  pairNested: PairNestedInput
  pairJson: PairJsonInput
  content: JSON
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  rating: Int
  pair: String
  pairNested: PairNestedInput
  pairJson: PairJsonInput
  content: JSON
}

type Virtual {
  id: ID!
  content: String
  counts: PostCounts
}

type PostCounts {
  words: Int
  sentences: Int
  paragraphs: Int
}

input VirtualWhereUniqueInput {
  id: ID
}

input VirtualWhereInput {
  AND: [VirtualWhereInput!]
  OR: [VirtualWhereInput!]
  NOT: [VirtualWhereInput!]
  id: IDFilter
  content: StringFilter
}

input VirtualOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input VirtualUpdateInput {
  content: String
}

input VirtualUpdateArgs {
  where: VirtualWhereUniqueInput!
  data: VirtualUpdateInput!
}

input VirtualCreateInput {
  content: String
}

type Name {
  id: ID!
  content: String
  author: Author
  authorName: String
}

input NameWhereUniqueInput {
  id: ID
}

input NameWhereInput {
  AND: [NameWhereInput!]
  OR: [NameWhereInput!]
  NOT: [NameWhereInput!]
  id: IDFilter
  content: StringFilter
  author: AuthorWhereInput
}

input NameOrderByInput {
  id: OrderDirection
  content: OrderDirection
}

input NameUpdateInput {
  content: String
  author: AuthorRelateToOneForUpdateInput
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
  disconnect: Boolean
}

input NameUpdateArgs {
  where: NameWhereUniqueInput!
  data: NameUpdateInput!
}

input NameCreateInput {
  content: String
  author: AuthorRelateToOneForCreateInput
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

type Author {
  id: ID!
  name: String
}

input AuthorWhereUniqueInput {
  id: ID
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AuthorUpdateInput {
  name: String
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createVirtual(data: VirtualCreateInput!): Virtual
  createVirtuals(data: [VirtualCreateInput!]!): [Virtual]
  updateVirtual(where: VirtualWhereUniqueInput!, data: VirtualUpdateInput!): Virtual
  updateVirtuals(data: [VirtualUpdateArgs!]!): [Virtual]
  deleteVirtual(where: VirtualWhereUniqueInput!): Virtual
  deleteVirtuals(where: [VirtualWhereUniqueInput!]!): [Virtual]
  createName(data: NameCreateInput!): Name
  createNames(data: [NameCreateInput!]!): [Name]
  updateName(where: NameWhereUniqueInput!, data: NameUpdateInput!): Name
  updateNames(data: [NameUpdateArgs!]!): [Name]
  deleteName(where: NameWhereUniqueInput!): Name
  deleteNames(where: [NameWhereUniqueInput!]!): [Name]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  virtuals(where: VirtualWhereInput! = {}, orderBy: [VirtualOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VirtualWhereUniqueInput): [Virtual!]
  virtual(where: VirtualWhereUniqueInput!): Virtual
  virtualsCount(where: VirtualWhereInput! = {}): Int
  names(where: NameWhereInput! = {}, orderBy: [NameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NameWhereUniqueInput): [Name!]
  name(where: NameWhereUniqueInput!): Name
  namesCount(where: NameWhereInput! = {}): Int
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
